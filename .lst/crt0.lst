   1              	# 1 "crt0.S"
   1              	/* 
   0              	
   2              	 crt0.S for LPC2xxx
   3              	 - based on examples from R O Software
   4              	 - based on examples from newlib-lpc
   5              	 - based on an example from Anglia Designs
   6              	
   7              	 collected and modified by Martin Thomas
   8              	*/
   9              	
  10              			.global _etext						// -> .data initial values in ROM
  11              			.global _data						// -> .data area in RAM
  12              			.global _edata						// end of .data area
  13              			.global __bss_start				// -> .bss area in RAM
  14              			.global __bss_end__				// end of .bss area
  15              	
  16              	
  17              	// Stack Sizes and Stack Top Addresses defined in Linkerscript !!
  18              			.global _UNDStackTop
  19              			.global _ABTStackTop
  20              			.global _FIQStackTop
  21              			.global _IRQStackTop
  22              			.global _SVCStackTop
  23              			.global _USRStackTop
  24              	
  25              	
  26              	// Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs
  27              			.set	MODE_USR, 0x10						// User Mode
  28              			.set	MODE_FIQ, 0x11						// FIQ Mode
  29              			.set	MODE_IRQ, 0x12						// IRQ Mode
  30              			.set	MODE_SVC, 0x13						// Supervisor Mode
  31              			.set	MODE_ABT, 0x17						// Abort Mode
  32              			.set	MODE_UND, 0x1B						// Undefined Mode
  33              			.set	MODE_SYS, 0x1F						// System Mode
  34              	
  35              			.equ	I_BIT,	0x80						// when I bit is set, IRQ is disabled
  36              			.equ	F_BIT,	0x40						// when F bit is set, FIQ is disabled
  37              	
  38              			.equ	VPBDIV,				0xE01FC100	// VPBDIV Address
  39              			
  40              	//		.equ	VPBDIV_Val,			0x00000000	// pclk = cclk / 4
  41              			.equ	VPBDIV_Val,			0x00000001	// pclk = cclk
  42              	//		.equ	VPBDIV_Val,			0x00000002	// pclk = cclk / 2
  43              	
  44              	
  45              			.equ	PLL_BASE,			0xE01FC080	// PLL Base Address
  46              			.equ	PLLCON_OFS,			0x00			// PLL Control Offset
  47              			.equ	PLLCFG_OFS,			0x04			// PLL Configuration Offset
  48              			.equ	PLLSTAT_OFS,		0x08			// PLL Status Offset
  49              			.equ	PLLFEED_OFS,		0x0C			// PLL Feed Offset
  50              			.equ	PLLCON_PLLE,		(1<<0)		// PLL Enable
  51              			.equ	PLLCON_PLLC,		(1<<1)		// PLL Connect
  52              			.equ	PLLCFG_MSEL,		(0x1F<<0)	// PLL Multiplier
  53              			.equ	PLLCFG_PSEL,		(0x03<<5)	// PLL Divider
  54              			.equ	PLLSTAT_PLOCK,		(1<<10)		// PLL Lock Status
  55              	
  56              	
  57              			.equ	PLL_MSEL,			4				// PLL_M = PLL_MSEL + 1
  58              			.equ	PLL_PSEL,			1				// PLL_P = 2 ^ PLL_PSEL
  59              	
  60              			//	PLL_PSEL	PLL_P
  61              			//	00			1
  62              			//	01			2
  63              			//	10			4
  64              			//	11			8
  65              	
  66              			// Fosc = 12 MHz
  67              	
  68              			// Fcco = Fosc * PLL_M * 2 * PLL_P	( 156 - 320 MHz)
  69              			// Fcpu = Fcco / ( 2 * PLL_P)
  70              	
  71              			.equ	PLLCFG_Val,     ( PLL_PSEL << 5 | PLL_MSEL)
  72              	
  73              			.equ	MAM_BASE,			0xE01FC000  // MAM Base Address
  74              			.equ	MAMCR_OFS,			0x00        // MAM Control Offset
  75              			.equ	MAMTIM_OFS,			0x04        // MAM Timing Offset
  76              	
  77              			.equ    MAMCR_Val,		0x00000002
  78              			.equ    MAMTIM_Val,		0x00000003
  79              	
  80              			.text
  81              			.arm
  82              			.section .init, "ax"
  83              	
  84              			.code 32
  85              			.align 2
  86              	
  87              			.global _boot
  88              			.func   _boot
  89              	_boot:
  90              	
  91              	// Runtime Interrupt Vectors
  92              	// -------------------------
  93              	Vectors:
  94 0000 FEFFFFEA 			b     _start                    // reset - _start
  95 0004 14F09FE5 			ldr   pc,_undf                  // undefined - _undf
  96 0008 14F09FE5 			ldr   pc,_swi                   // SWI - _swi
  97 000c 14F09FE5 			ldr   pc,_pabt                  // program abort - _pabt
  98 0010 14F09FE5 			ldr   pc,_dabt                  // data abort - _dabt
  99 0014 0000A0E1 			nop                             // reserved
 100 0018 F0FF1FE5 			ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
 101 001c 10F09FE5 			ldr   pc,_fiq                   // FIQ - _fiq
 102              	
 103              	
 104              	// Use this group for development
 105 0020 38000000 	_undf:  .word __undf                    // undefined
 106 0024 3C000000 	_swi:   .word __swi                     // SWI
 107 0028 40000000 	_pabt:  .word __pabt                    // program abort
 108 002c 44000000 	_dabt:  .word __dabt                    // data abort
 109 0030 48000000 	_irq:   .word __irq                     // IRQ
 110 0034 4C000000 	_fiq:   .word __fiq                     // FIQ
 111              	
 112 0038 FEFFFFEA 	__undf:	b	.							// undefined
 113 003c FEFFFFEA 	__swi:	b	.							// SWI
 114 0040 FEFFFFEA 	__pabt:	b	.							// program abort
 115 0044 FEFFFFEA 	__dabt:	b	.							// data abort
 116 0048 FEFFFFEA 	__irq:	b	.							// IRQ
 117 004c FEFFFFEA 	__fiq:	b	.							// FIQ
 118              	
 120              			.endfunc
 121              	
 122              	
 123              	// Setup the operating mode & stack.
 124              	// ---------------------------------
 125              			.global _start, start, _mainCRTStartup
 126              			.func   _start
 127              	
 128              	_start:
 129              	start:
 130              	_mainCRTStartup:
 131              	
 132              	// VPB_DIV Setup
 133 0050 08019FE5 			LDR     R0, =VPBDIV
 134 0054 0110A0E3 			LDR     R1, =VPBDIV_Val
 135 0058 001080E5 			STR     R1, [R0]
 136              	
 137              	
 138              	// PLL Setup
 139 005c 00019FE5 			LDR     R0, =PLL_BASE
 140 0060 AA10A0E3 			MOV     R1, #0xAA
 141 0064 5520A0E3 			MOV     R2, #0x55
 142              	
 143              	// Configure and Enable PLL
 144 0068 2430A0E3 			MOV     R3, #PLLCFG_Val
 145 006c 043080E5 			STR     R3, [R0, #PLLCFG_OFS] 
 146 0070 0130A0E3 			MOV     R3, #PLLCON_PLLE
 147 0074 003080E5 			STR     R3, [R0, #PLLCON_OFS]
 148 0078 0C1080E5 			STR     R1, [R0, #PLLFEED_OFS]
 149 007c 0C2080E5 			STR     R2, [R0, #PLLFEED_OFS]
 150              	
 151              	// Wait until PLL Locked
 152              	PLL_Loop:
 153 0080 083090E5 			LDR     R3, [R0, #PLLSTAT_OFS]
 154 0084 013B13E2 			ANDS    R3, R3, #PLLSTAT_PLOCK
 155 0088 FCFFFF0A 			BEQ     PLL_Loop
 156              	
 157              	// Switch to PLL Clock
 158 008c 0330A0E3 			MOV     R3, #(PLLCON_PLLE | PLLCON_PLLC)
 159 0090 003080E5 			STR     R3, [R0, #PLLCON_OFS]
 160 0094 0C1080E5 			STR     R1, [R0, #PLLFEED_OFS]
 161 0098 0C2080E5 			STR     R2, [R0, #PLLFEED_OFS]
 162              	
 163              	// MAM Setup
 164 009c C4009FE5 			LDR     R0, =MAM_BASE
 165 00a0 0310A0E3 			MOV     R1, #MAMTIM_Val
 166 00a4 041080E5 			STR     R1, [R0, #MAMTIM_OFS] 
 167 00a8 0210A0E3 			MOV     R1, #MAMCR_Val
 168 00ac 001080E5 			STR     R1, [R0, #MAMCR_OFS] 
 169              	
 170              	
 171              	// Initialize Interrupt System
 172              	// - Set stack location for each mode
 173              	// -----------------------------------------------        
 174 00b0 DBF021E3 			MSR   CPSR_c,#MODE_UND|I_BIT|F_BIT	// Undefined Instruction Mode
 175 00b4 B0D09FE5 			LDR   sp,=_UNDStackTop
 176              	
 177 00b8 D7F021E3 			MSR   CPSR_c,#MODE_ABT|I_BIT|F_BIT	// Abort Mode
 178 00bc ACD09FE5 			LDR   sp,=_ABTStackTop
 179              	
 180 00c0 D1F021E3 			MSR   CPSR_c,#MODE_FIQ|I_BIT|F_BIT	// FIQ Mode
 181 00c4 A8D09FE5 			LDR   sp,=_FIQStackTop
 182              	
 183 00c8 D2F021E3 			MSR   CPSR_c,#MODE_IRQ|I_BIT|F_BIT	// IRQ Mode
 184 00cc A4D09FE5 			LDR   sp,=_IRQStackTop
 185              	
 186 00d0 D3F021E3 			MSR   CPSR_c,#MODE_SVC|I_BIT|F_BIT	// SVC Mode
 187 00d4 A0D09FE5 			LDR   sp,=_SVCStackTop
 188              	
 189 00d8 10F021E3 			MSR   CPSR_c,#MODE_USR				// User Mode
 190 00dc 9CD09FE5 			LDR   sp,=_USRStackTop
 191              	
 192              	
 193              	
 194              	// Copy initialized data to its execution address in RAM
 195              	// -----------------------------------------------------
 196 00e0 9C109FE5 			LDR   r1,=_etext                // -> ROM data start
 197 00e4 9C209FE5 			LDR   r2,=_data                 // -> data start
 198 00e8 9C309FE5 			LDR   r3,=_edata                // -> end of data
 199 00ec 030052E1 	1:		CMP   r2,r3                     // check if data to move
 200 00f0 04009134 			LDRLO r0,[r1],#4                // copy it
 201 00f4 04008234 			STRLO r0,[r2],#4
 202 00f8 FBFFFF3A 			BLO   1b                        // loop until done
 203              	
 204              	
 205              	// Clear .bss
 206              	// ----------
 207 00fc 0000A0E3 			mov   r0,#0                     // get a zero
 208 0100 88109FE5 			ldr   r1,=__bss_start           // -> bss start
 209 0104 88209FE5 			ldr   r2,=__bss_end__           // -> bss end
 210 0108 020051E1 	2:		cmp   r1,r2                     // check if data to clear
 211 010c 04008134 			strlo r0,[r1],#4                // clear 4 bytes
 212 0110 FCFFFF3A 			blo   2b                        // loop until done
 213              	
 214              	
 215              	/*
 216              		Call C++ constructors (for objects in "global scope")
 217              		ctor loop added by Martin Thomas 4/2005 
 218              		based on a Anglia Design example-application for ST ARM
 219              	*/
 220              	
 221 0114 7C009FE5 			LDR 	r0, =__ctors_start__
 222 0118 7C109FE5 			LDR 	r1, =__ctors_end__
 223              	ctor_loop:
 224 011c 010050E1 			CMP 	r0, r1
 225 0120 0500000A 			BEQ 	ctor_end
 226 0124 042090E4 			LDR 	r2, [r0], #4
 227 0128 03002DE9 			STMFD 	sp!, {r0-r1}
 228 012c 0FE0A0E1 			MOV 	lr, pc
 229 0130 02F0A0E1 			MOV 	pc, r2
 230 0134 0300BDE8 			LDMFD 	sp!, {r0-r1}
 231 0138 F7FFFFEA 			B 		ctor_loop
 232              	ctor_end:
 233              	
 234              	
 235              	// Call main program: main(0)
 236              	// --------------------------
 237 013c 0000A0E3 			mov   r0,#0                     // no arguments (argc = 0)
 238 0140 0010A0E1 			mov   r1,r0
 239 0144 0020A0E1 			mov   r2,r0
 240 0148 00B0A0E1 			mov   fp,r0                     // null frame pointer
 241 014c 0070A0E1 			mov   r7,r0                     // null frame pointer for thumb
 242 0150 48A09FE5 			ldr   r10,=main
 243 0154 0FE0A0E1 			mov   lr,pc
 244              	
 245              	/* Enter the C code, use BX instruction so as to never return */
 246              	/* use BLX (?) main if you want to use c++ destructors below */
 247              	
 248 0158 1AFF2FE1 			bx    r10                       // enter main()
 249              	
 250              	
 251              	
 252              	/* "global object"-dtors are never called and it should not be 
 253              	   needed since there is no OS to exit to. */
 254              	/* Call destructors */
 255              	
 256              	#		LDR		r0, =__dtors_start__
 257              	#		LDR		r1, =__dtors_end__
 258              	dtor_loop:
 259              	#		CMP		r0, r1
 260              	#		BEQ		dtor_end
 261              	#		LDR		r2, [r0], #4
 262              	#		STMFD	sp!, {r0-r1}
 263              	#		MOV		lr, pc
 264              	#		MOV		pc, r2
 265              	#		LDMFD	sp!, {r0-r1}
 266              	#		B		dtor_loop
 267              	dtor_end:
 268              	
 269              	
 271              	        .endfunc
 272              	
 273              	        .global _reset, reset, exit, abort
 274              	        .func   _reset
 275              	_reset:
 276              	reset:
 277              	exit:
 278              	abort:
 279              	
 280              	
 281 015c FEFFFFEA 			b     .                         // loop until reset
 282              	
 284              			.endfunc
 285              	
 286 0160 00C11FE0 			.end
 286      80C01FE0 
 286      00C01FE0 
 286      00000000 
 286      00000000 
DEFINED SYMBOLS
              crt0.S:27     *ABS*:00000010 MODE_USR
              crt0.S:28     *ABS*:00000011 MODE_FIQ
              crt0.S:29     *ABS*:00000012 MODE_IRQ
              crt0.S:30     *ABS*:00000013 MODE_SVC
              crt0.S:31     *ABS*:00000017 MODE_ABT
              crt0.S:32     *ABS*:0000001b MODE_UND
              crt0.S:33     *ABS*:0000001f MODE_SYS
              crt0.S:35     *ABS*:00000080 I_BIT
              crt0.S:36     *ABS*:00000040 F_BIT
              crt0.S:38     *ABS*:e01fc100 VPBDIV
              crt0.S:41     *ABS*:00000001 VPBDIV_Val
              crt0.S:45     *ABS*:e01fc080 PLL_BASE
              crt0.S:46     *ABS*:00000000 PLLCON_OFS
              crt0.S:47     *ABS*:00000004 PLLCFG_OFS
              crt0.S:48     *ABS*:00000008 PLLSTAT_OFS
              crt0.S:49     *ABS*:0000000c PLLFEED_OFS
              crt0.S:50     *ABS*:00000001 PLLCON_PLLE
              crt0.S:51     *ABS*:00000002 PLLCON_PLLC
              crt0.S:52     *ABS*:0000001f PLLCFG_MSEL
              crt0.S:53     *ABS*:00000060 PLLCFG_PSEL
              crt0.S:54     *ABS*:00000400 PLLSTAT_PLOCK
              crt0.S:57     *ABS*:00000004 PLL_MSEL
              crt0.S:58     *ABS*:00000001 PLL_PSEL
              crt0.S:71     *ABS*:00000024 PLLCFG_Val
              crt0.S:73     *ABS*:e01fc000 MAM_BASE
              crt0.S:74     *ABS*:00000000 MAMCR_OFS
              crt0.S:75     *ABS*:00000004 MAMTIM_OFS
              crt0.S:77     *ABS*:00000002 MAMCR_Val
              crt0.S:78     *ABS*:00000003 MAMTIM_Val
              crt0.S:85     .init:00000000 $a
              crt0.S:89     .init:00000000 _boot
              crt0.S:93     .init:00000000 Vectors
              crt0.S:128    .init:00000050 _start
              crt0.S:105    .init:00000020 _undf
              crt0.S:106    .init:00000024 _swi
              crt0.S:107    .init:00000028 _pabt
              crt0.S:108    .init:0000002c _dabt
              crt0.S:110    .init:00000034 _fiq
              crt0.S:105    .init:00000020 $d
              crt0.S:112    .init:00000038 __undf
              crt0.S:113    .init:0000003c __swi
              crt0.S:114    .init:00000040 __pabt
              crt0.S:115    .init:00000044 __dabt
              crt0.S:109    .init:00000030 _irq
              crt0.S:116    .init:00000048 __irq
              crt0.S:117    .init:0000004c __fiq
              crt0.S:112    .init:00000038 $a
              crt0.S:129    .init:00000050 start
              crt0.S:130    .init:00000050 _mainCRTStartup
              crt0.S:152    .init:00000080 PLL_Loop
              crt0.S:223    .init:0000011c ctor_loop
              crt0.S:232    .init:0000013c ctor_end
              crt0.S:258    .init:0000015c dtor_loop
              crt0.S:267    .init:0000015c dtor_end
              crt0.S:275    .init:0000015c _reset
              crt0.S:276    .init:0000015c reset
              crt0.S:277    .init:0000015c exit
              crt0.S:278    .init:0000015c abort
              crt0.S:286    .init:00000160 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
_etext
_data
_edata
__bss_start
__bss_end__
_UNDStackTop
_ABTStackTop
_FIQStackTop
_IRQStackTop
_SVCStackTop
_USRStackTop
__ctors_start__
__ctors_end__
main
